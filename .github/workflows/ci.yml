name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint --if-present
    
    - name: Run type check
      run: npm run type-check --if-present
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: npm test --if-present
    
    - name: Test setup
      run: |
        cp .env.example .env
        echo "GITHUB_TOKEN=dummy_token" >> .env
        echo "GITHUB_OWNER=test" >> .env
        echo "GITHUB_REPO=test" >> .env
        npm run setup || echo "Setup test completed"

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t claude-bot:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm claude-bot:latest node --version
        echo "Docker image test completed"

  release:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version
      id: version
      run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
